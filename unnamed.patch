Index: src/com/CrackCodingInterview/Arrays/ArraysListProgram.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/CrackCodingInterview/Arrays/ArraysListProgram.java b/src/com/CrackCodingInterview/Arrays/ArraysListProgram.java
new file mode 100644
--- /dev/null	(revision edb1caa70aaf2c5f3099af087e298e514bc697f0)
+++ b/src/com/CrackCodingInterview/Arrays/ArraysListProgram.java	(revision edb1caa70aaf2c5f3099af087e298e514bc697f0)
@@ -0,0 +1,36 @@
+    package com.CrackCodingInterview.Arrays;
+
+    import java.util.Hashtable;
+
+    public class ArraysListProgram {
+
+        // String cat  mat tac
+
+        public static boolean checkPermutationString(String str1, String str2) {
+        if(str1.length()!=str2.length())
+            return false;
+
+          int[] letter = new int[128];
+          char[] sArray = str1.toCharArray();
+           for(Character c : sArray){
+             letter[c]++;
+        }
+
+           for(int i=0;i<str2.length();i++){
+               int c = str1.charAt(i);
+               letter[c]--;
+               if(letter[c]<0){
+                   return false;
+               }
+           }
+            return true;
+        }
+
+        public static void main(String[] args) {
+
+            String str ="CAT";
+            String str1 ="TAC";
+            System.out.println(checkPermutationString(str,str1));
+
+        }
+    }
Index: src/com/CrackCodingInterview/Arrays/ReplaceString.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/CrackCodingInterview/Arrays/ReplaceString.java b/src/com/CrackCodingInterview/Arrays/ReplaceString.java
new file mode 100644
--- /dev/null	(revision edb1caa70aaf2c5f3099af087e298e514bc697f0)
+++ b/src/com/CrackCodingInterview/Arrays/ReplaceString.java	(revision edb1caa70aaf2c5f3099af087e298e514bc697f0)
@@ -0,0 +1,30 @@
+package com.CrackCodingInterview.Arrays;
+
+public class ReplaceString {
+
+    // WAP to to replace  space to %20
+        public static void main(String[] args) {
+            // Example input string
+            String input = "This is a test string.";
+
+            // Convert the string to StringBuilder
+            StringBuilder sb = new StringBuilder(input);
+
+            int Sample_Array[];
+            Sample_Array = new int[20];
+
+
+            // Replace spaces with %20
+            for (int i = 0; i < sb.length(); i++) {
+                if (sb.charAt(i) == ' ') {
+                    sb.replace(i, i + 1, "%20");
+                    i += 2;
+                }
+            }
+
+            // Print the result
+            System.out.println("Original String: " + input);
+            System.out.println("Modified String: " + sb.toString());
+        }
+    }
+
Index: src/com/codeWars_problems/Jaden_Casing_Strings.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/codeWars_problems/Jaden_Casing_Strings.java b/src/com/codeWars_problems/Jaden_Casing_Strings.java
new file mode 100644
--- /dev/null	(revision edb1caa70aaf2c5f3099af087e298e514bc697f0)
+++ b/src/com/codeWars_problems/Jaden_Casing_Strings.java	(revision edb1caa70aaf2c5f3099af087e298e514bc697f0)
@@ -0,0 +1,23 @@
+package com.codeWars_problems;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Set;
+import java.util.stream.Collectors;
+
+public class Jaden_Casing_Strings {
+
+    public static void main(String[] args) {
+
+        List<String> list1 = List.of("Apple","mango","Banana");
+        List<String> list2 =List.of("mango","Oranage","Cherry");
+
+        Set <String> unique = list1.stream().filter(element ->list2.contains(element)).collect(Collectors.toSet());
+        System.out.println(unique);
+
+        List.of(list1,list2).stream().flatMap(List::stream).distinct().collect(Collectors.toSet());
+
+
+
+    }
+}
Index: src/com/develop/logic/ArrayHandle.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/develop/logic/ArrayHandle.java b/src/com/develop/logic/ArrayHandle.java
new file mode 100644
--- /dev/null	(revision edb1caa70aaf2c5f3099af087e298e514bc697f0)
+++ b/src/com/develop/logic/ArrayHandle.java	(revision edb1caa70aaf2c5f3099af087e298e514bc697f0)
@@ -0,0 +1,49 @@
+package com.develop.logic;
+
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+
+public class ArrayHandle {
+
+    public static int countValue(Boolean[] array){
+
+        return Collections.frequency(Arrays.asList(array),true);
+    }
+
+    public static int countArray(Boolean[] array){
+        // Loop array and find the value of status
+
+        int size =array.length;
+        int countfalse = 0;
+
+        for(Boolean value : array){
+            if(Boolean.TRUE.equals(value)){
+                countfalse++;
+            }
+        }
+
+       /* for(int i=0; i<size; i++){
+            if(array[i].equals(false)){
+                countfalse++;
+            }
+        }*/
+
+
+        int total_count =  size - countfalse;
+        return total_count;
+    }
+    public static void main(String[] args) {
+        Boolean[] array1 = {true,  true,  true,  false,
+                true,  true,  true,  true ,
+                true,  false, true,  false,
+                true,  false, false, true ,
+                true,  true,  true,  true ,
+                false, false, true,  true };
+
+
+        int countvale = countArray(array1);
+        System.out.print(""+countValue(array1));
+        System.out.println("There are 17 sheeps in total" +countvale);
+    }
+}
Index: src/com/develop/logic/JavaStringPrograms.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/develop/logic/JavaStringPrograms.java b/src/com/develop/logic/JavaStringPrograms.java
new file mode 100644
--- /dev/null	(revision edb1caa70aaf2c5f3099af087e298e514bc697f0)
+++ b/src/com/develop/logic/JavaStringPrograms.java	(revision edb1caa70aaf2c5f3099af087e298e514bc697f0)
@@ -0,0 +1,54 @@
+package com.develop.logic;
+
+public class JavaStringPrograms {
+// Remove a particular char from string
+
+    public static String removeCharAt(String str, int pos){
+        return str.substring(0,pos) + str.substring(pos + 1);
+    }
+    public static  void LastOccurnaceIndex(){
+        String strOrig = "Hello world ,Hello Reader";
+        int lastIndex = strOrig.lastIndexOf("Hello");
+
+        if(lastIndex == - 1){
+            System.out.println("Hello not found");
+        } else {
+            System.out.println("Last occurrence of Hello is at index "+ lastIndex);
+        }
+    }
+
+    public static void StringReplace(){
+//        How to replace a substring inside a string by another one?
+
+    }
+
+    public static boolean isSorted(int[] a){
+        boolean isSorted = true;
+        boolean isAscending = a[1] > a[0];
+        if(isAscending) {
+            for (int i = 0; i < a.length-1; i++) {
+                if(a[i] > a[i+1]) {
+                    isSorted = false;
+                    break;
+                }
+            }
+        } else {//descending
+            for (int i = 0; i < a.length-1; i++) {
+                if(a[i] < a[i+1]) {
+                    isSorted = false;
+                    break;
+                }
+            }
+        }
+        return isSorted;
+    }
+
+
+    public static void main(String[] args) {
+
+    System.out.println(removeCharAt("Sunny is Good name",9));
+      int ar[] = {10,9,8};
+       System.out.println("here the array is sorted :"+isSorted(ar));
+    }
+
+}
Index: src/com/develop/logic/SampleList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/develop/logic/SampleList.java b/src/com/develop/logic/SampleList.java
new file mode 100644
--- /dev/null	(revision edb1caa70aaf2c5f3099af087e298e514bc697f0)
+++ b/src/com/develop/logic/SampleList.java	(revision edb1caa70aaf2c5f3099af087e298e514bc697f0)
@@ -0,0 +1,37 @@
+package com.develop.logic;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.stream.Collectors;
+
+public class SampleList {
+
+
+    public static boolean zeroFuel(double distanceToPump, double mpg, double fuelLeft){
+        if(fuelLeft * mpg == distanceToPump)
+            return true;
+        else
+            return false;
+    }
+
+    public static String repeatOrder(final int value, final String str){
+
+        StringBuilder builder = new StringBuilder();
+        for(int i =0; i<value; i++){
+            builder.append(str);
+        }
+        return builder.toString();
+    }
+
+    public static void main(String[] args) {
+
+   // repeatOrder(4,"aaaa");
+
+    zeroFuel(50,25,2);
+
+    }
+
+
+
+}
Index: src/com/develop/logic/sortedList.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/develop/logic/sortedList.java b/src/com/develop/logic/sortedList.java
new file mode 100644
--- /dev/null	(revision edb1caa70aaf2c5f3099af087e298e514bc697f0)
+++ b/src/com/develop/logic/sortedList.java	(revision edb1caa70aaf2c5f3099af087e298e514bc697f0)
@@ -0,0 +1,58 @@
+package com.develop.logic;
+
+import java.util.List;
+
+public class sortedList {
+
+    public static boolean isArraySorted(int[] arr){
+         int len = arr.length;
+         for(int i=0;i<=len;i++){
+             if(arr[i]>arr[i+1]){
+                 return false;
+             }
+         }
+        return true;
+    }
+
+    public static boolean isSoretedList(List<Integer> list) {
+        // Check the condition
+        if (list.isEmpty() || list != null) {
+            return false;
+        }
+        for (int i = 0; i < list.size(); i++) {
+            if (list.get(i) >= list.get(i + 1)) {
+                System.out.println("List is not sorted");
+                return false;
+            }
+        }
+          return true;
+    }
+
+    public static void main(String[] args) {
+
+     /*   List<Integer> list = Arrays.asList(9,8,7,6);
+        System.out.println("Is Sorted list or not : "+isSoretedList(list));
+*/
+       /* int[] arr = {12,23,34,45,56} ;
+        System.out.println("Array list is sorted or not :" +isArraySorted(arr));*/
+
+
+/*        int str =123;
+        int str1 =123;
+
+        if(str == str1){
+            System.out.println("Print 0");
+
+        }else{
+            System.out.println("Print 1");
+        }
+    }*/
+
+        int x, y, z;
+        x=9; y=10;
+
+        z=++x+y++;
+
+        System.out.println("What are the value of x , y and z :"+x +" Y :" +y +" Z avlaue :"+z);
+    }
+}
Index: src/com/lokesh/MaxOccurrenceChar.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/lokesh/MaxOccurrenceChar.java b/src/com/lokesh/MaxOccurrenceChar.java
new file mode 100644
--- /dev/null	(revision edb1caa70aaf2c5f3099af087e298e514bc697f0)
+++ b/src/com/lokesh/MaxOccurrenceChar.java	(revision edb1caa70aaf2c5f3099af087e298e514bc697f0)
@@ -0,0 +1,57 @@
+package com.lokesh;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Scanner;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Scanner;
+
+public class MaxOccurrenceChar {
+
+    public static char getMaxOccurrenceChar(String str) {
+        if (str == null || str.isEmpty()) {
+            throw new IllegalArgumentException("Input string cannot be null or empty");
+        }
+
+        // Remove all spaces from the input string
+        str = str.replaceAll("\\s+", ""); // "\\s+" matches one or more whitespace characters
+
+        // Use a HashMap to count occurrences of each character
+        Map<Character, Integer> charCountMap = new HashMap<>();
+        for (char ch : str.toCharArray()) {
+            charCountMap.put(ch, charCountMap.getOrDefault(ch, 0) + 1);
+        }
+
+        // Determine the character with the maximum occurrences
+        char maxChar = str.charAt(0);
+        int maxCount = 0;
+
+        for (Map.Entry<Character, Integer> entry : charCountMap.entrySet()) {
+            if (entry.getValue() > maxCount) {
+                maxChar = entry.getKey();
+                maxCount = entry.getValue();
+            }
+        }
+
+        return maxChar;
+    }
+
+    public static void main(String[] args) {
+        Scanner scanner = new Scanner(System.in);
+
+        System.out.print("Enter a string: ");
+        String input = scanner.nextLine();
+
+        try {
+            char maxChar = getMaxOccurrenceChar(input);
+            System.out.println("The character with the maximum occurrence is: " + maxChar);
+        } catch (IllegalArgumentException e) {
+            System.out.println(e.getMessage());
+        }
+
+        scanner.close();
+    }
+}
+
+
Index: src/com/lokesh/PalindromeChecker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/lokesh/PalindromeChecker.java b/src/com/lokesh/PalindromeChecker.java
new file mode 100644
--- /dev/null	(revision edb1caa70aaf2c5f3099af087e298e514bc697f0)
+++ b/src/com/lokesh/PalindromeChecker.java	(revision edb1caa70aaf2c5f3099af087e298e514bc697f0)
@@ -0,0 +1,39 @@
+package com.lokesh;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class PalindromeChecker {
+    public static boolean isPalindrome(String str){
+        if(str.isEmpty() || (str == null))
+            return false;
+        int len = str.length();
+        for(int i=0; i< len/2; i++){
+            if(str.charAt(i) != str.charAt(len -i - 1)){
+                return false;
+            }
+        }
+        return true;
+    }
+
+  public static List<String> checkPalingdrome(List<String> checkStrings){
+      List<String> palindgdrom = new ArrayList<>();
+       for(String str:checkStrings){
+           if(isPalindrome(str)){
+               palindgdrom.add(str);
+           }
+       }
+      return palindgdrom;
+  }
+
+    public static void main(String[] args) {
+
+      List<String> list = new ArrayList<>();
+      list.add("madam");
+      list.add("malayalam");
+      list.add("tobeten");
+      list.add("sunny");
+
+      System.out.println("Check if palingdrom or not :"+checkPalingdrome(list));
+    }
+}
Index: src/com/lokesh/ProgramConcept.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/lokesh/ProgramConcept.java b/src/com/lokesh/ProgramConcept.java
new file mode 100644
--- /dev/null	(revision edb1caa70aaf2c5f3099af087e298e514bc697f0)
+++ b/src/com/lokesh/ProgramConcept.java	(revision edb1caa70aaf2c5f3099af087e298e514bc697f0)
@@ -0,0 +1,63 @@
+package com.lokesh;
+
+import java.io.BufferedReader;
+import java.io.InputStreamReader;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashSet;
+
+public class ProgramConcept {
+    // Reverse a string
+    public static void main(String[] args) {
+
+     System.out.println(ReverseString("My Name is Sunny"));
+
+     String str = "ssuunnyDyeol";
+        System.out.println(Arrays.stream(str.split("")).filter(str1 ->str.toLowerCase().indexOf(str1)==str.toLowerCase().lastIndexOf(str1)).findFirst().orElse(""));
+        String str1="Scaler";
+
+        HashSet<Character> unique = new HashSet<>();
+        for(int i=0;i<str.length();i++){
+            char ch = str.charAt(i);
+            if(unique.contains(ch)==true){
+                unique.remove(ch);
+
+            }else{
+                unique.add(ch);
+            }
+        }
+    if(unique.size()==0){
+            System.out.println("There is no Unique char");
+        }
+        for(Character ch : unique){
+            System.out.println(ch+" ");
+        }
+    }
+
+    public static String reverse(String str) {
+        char[] chars = str.toCharArray();
+        String reversed = "";
+        int j = 0; // index for reversed string
+
+        for (int i = chars.length - 1; i >= 0; i--) {
+            if (!Character.isWhitespace(chars[i])) {
+                reversed += chars[i];                j++;
+            }
+        }
+
+        // Remove extra spaces at the end (optional)
+        return reversed.substring(0, j);
+    }
+    static String ReverseString(String str){
+        char[] chars = str.toCharArray();
+        String reversed ="";
+
+        for(int i= chars.length-1;i>=0;i--){
+            reversed+=chars[i];
+        }
+        return reversed;
+    }
+}
+
Index: src/com/lokesh/WAP_Check_String_has_Duplicate.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/lokesh/WAP_Check_String_has_Duplicate.java b/src/com/lokesh/WAP_Check_String_has_Duplicate.java
new file mode 100644
--- /dev/null	(revision edb1caa70aaf2c5f3099af087e298e514bc697f0)
+++ b/src/com/lokesh/WAP_Check_String_has_Duplicate.java	(revision edb1caa70aaf2c5f3099af087e298e514bc697f0)
@@ -0,0 +1,47 @@
+package com.lokesh;
+
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Set;
+
+public class WAP_Check_String_has_Duplicate {
+    /*
+    Write a Java program to find the duplicate words and their number of occurrences in a string
+          String =" Bread and butter always a butter"
+          return words= butter = 2
+          basic if sentence have multiple words split first from String array
+          Scope of variable should be in loop
+     */
+
+    public static void duplicateWords(String inputString){
+        //Splitting inputString into wo
+        String[] words = inputString.split(" ");
+
+        //Iterate over the call
+        HashMap<String, Integer> wordcount = new HashMap<String, Integer>();
+
+        for(String word: words){
+            if(wordcount.containsKey(word.toLowerCase())){
+                wordcount.put(word.toLowerCase(),wordcount.get(word.toLowerCase())+1);
+            }else{
+                wordcount.put(word.toLowerCase(),1);
+            }
+
+        }
+        Set<String> wordCountToString = wordcount.keySet();
+        for(String word:wordCountToString){
+            if(wordcount.get(word)>1){
+                System.out.println(word+" : "+wordcount.get(word));
+            }
+        }
+    }
+
+    public static void main(String[] args)
+    {
+        duplicateWords("Bread butter and bread");
+
+        duplicateWords("Java is java again java");
+
+        duplicateWords("Super Man Bat Man Spider Man");
+    }
+}
Index: src/com/lokesh/stringmaniputaltion.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/lokesh/stringmaniputaltion.java b/src/com/lokesh/stringmaniputaltion.java
new file mode 100644
--- /dev/null	(revision edb1caa70aaf2c5f3099af087e298e514bc697f0)
+++ b/src/com/lokesh/stringmaniputaltion.java	(revision edb1caa70aaf2c5f3099af087e298e514bc697f0)
@@ -0,0 +1,43 @@
+package com.lokesh;
+
+public class stringmaniputaltion {
+
+    // String str = a2b3c4
+
+    public static char[] duplicateChar(String str) {
+        // check the length of string  //sunny
+        int len = str.length();
+         char[] ch = str.toCharArray();
+        for (int i = 0; i < len; i++) {
+            System.out.println("Check the char" + ch);
+            if (ch[i] == ch[i + 1]) {
+                StringBuilder builder = new StringBuilder();
+                builder.append(ch);
+                return ch;
+            }
+        }
+        return ch.toString().toCharArray();
+    }
+
+    public static String returnString(String str){
+            StringBuilder builder = new StringBuilder();
+            for(int i=0;i<str.length();i++){
+                char currentchar = str.charAt(i);
+                 if (Character.isLetter(currentchar) && i + 1 < str.length()
+                         && Character.isDigit(str.charAt(i + 1))) {
+                     int count = Character.getNumericValue(str.charAt(i + 1));
+                     for (int j = 0; j < count; j++) {
+                         builder.append(currentchar);
+                     }
+                     i++;
+
+                 }
+                }
+        return builder.toString();
+
+    }
+    public static void main(String[] args) {
+      System.out.println("The value of new chararcter "+returnString("a3b4c6"));
+      System.out.print("Duplicate char :"+duplicateChar("sunny"));
+    }
+}
Index: src/com/lokesh/teams.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/lokesh/teams.java b/src/com/lokesh/teams.java
new file mode 100644
--- /dev/null	(revision edb1caa70aaf2c5f3099af087e298e514bc697f0)
+++ b/src/com/lokesh/teams.java	(revision edb1caa70aaf2c5f3099af087e298e514bc697f0)
@@ -0,0 +1,55 @@
+package com.lokesh;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class teams {
+
+        public static void main(String[] args) {
+            // Initial list of names
+            List<String> names;
+            names = List.of("Lokesh Kumar Sharma", "Sunny Kulkarni", "Ashish Kumar Sharma", "Rahul Kulkarni");
+
+            String FullName = "Lokesh Kumar Sharma";
+            System.out.println(" Get the between name" +getLastName(FullName));
+
+            // Create teams
+            List<String> teamSharma = new ArrayList<>();
+            List<String> teamKulkarni = new ArrayList<>();
+
+            // Categorize names into teams
+            categorizeNames(names, teamSharma, teamKulkarni);
+
+            // Print the teams
+            printTeam("Team Sharma", teamSharma);
+            printTeam("Team Kulkarni", teamKulkarni);
+        }
+
+
+
+        public static void categorizeNames(List<String> names, List<String> teamSharma, List<String> teamKulkarni) {
+            for (String fullName : names) {
+                String lastName = getLastName(fullName);
+
+                if ("Sharma".equalsIgnoreCase(lastName)) {
+                    teamSharma.add(fullName);
+                } else if ("Kulkarni".equalsIgnoreCase(lastName)) {
+                    teamKulkarni.add(fullName);
+                }
+            }
+        }
+
+
+        public static String getLastName(String fullName) {
+            String[] parts = fullName.split(" ");
+            return parts.length == 2 ? parts[1] : "";
+        }
+
+        public static void printTeam(String teamName, List<String> teamList) {
+            System.out.println(teamName + ":");
+            for (String name : teamList) {
+                System.out.println(name);
+            }
+            System.out.println(); // For separating teams
+        }
+    }
Index: src/com/rohit/Sample.java
===================================================================
diff --git a/src/com/rohit/Sample.java b/src/com/rohit/Sample.java
deleted file mode 100644
--- a/src/com/rohit/Sample.java	(revision fa9c493fb32fd872badaf85ff734eee51ef49201)
+++ /dev/null	(revision fa9c493fb32fd872badaf85ff734eee51ef49201)
@@ -1,610 +0,0 @@
-package com.rohit;
-
-import java.time.LocalDate;
-import java.time.Period;
-import java.util.*;
-import java.util.function.Function;
-import java.util.stream.IntStream;
-import java.util.stream.Stream;
-
-import static java.util.Comparator.reverseOrder;
-import static java.util.List.of;
-import static java.util.stream.Collectors.*;
-
-public class Sample {
-    public static void main(String[] args) {
-
-        /**
-         * Separate odd and even numbers in a list of integers.
-         *
-         * Given a list of integers, write a Java 8 program to separate
-         * the odd and even numbers into two separate lists.
-         */
-
-        separationOfEvenOddNumberInMap();
-        separationOfEvenOddNumberInList();
-
-        /**
-         * Remove duplicate elements from a list using Java 8 streams
-         *
-         * Write a Java 8 program to remove duplicate elements from a list
-         * using the stream API and lambda expressions.
-         */
-
-        removeDuplicateFromList();
-
-
-        /**
-         * Find the frequency of each character in a string using Java 8 streams
-         *
-         * Write a Java 8 program to find the frequency of each character in
-         * a given string using the stream API and collectors.
-         */
-        characterFrequency();
-
-        /**
-         * Find the frequency of each element in an array or a list
-         *
-         * Write a Java 8 program to find the frequency of
-         * each element in an array or a list using streams and collectors.
-         */
-
-        wordFrequency();
-
-        /**
-         * Sort a given list of decimals in reverse order
-         *
-         * Write a Java 8 program to sort a given list of decimal numbers in reverse order.
-         */
-
-        reverseSortedList();
-
-        /**
-         * Join a list of strings with '[' as prefix, ']' as suffix, and ',' as delimiter
-         *
-         * Given a list of strings, write a Java 8 program to join the strings
-         * with '[' as a prefix, ']' as a suffix, and ',' as a delimiter.
-         */
-
-        joinListOfStrings();
-
-        /**
-         * Print the numbers from a given list of integers that are multiples of 5
-         *
-         * Write a Java 8 program to print the numbers from a given list of integers that are multiples of 5.
-         */
-
-        multipleOf5();
-
-        /**
-         * Find the maximum and minimum of a list of integers
-         * Given a list of integers, write a Java 8 program to find the maximum and minimum numbers in the list.
-         */
-
-        minMaxFromList();
-
-        /**
-         * Merge two unsorted arrays into a single sorted array using Java 8 streams
-         * Write a Java 8 program to merge two unsorted arrays into a single-sorted array using the stream API.
-         */
-        mergeUnsortedArrayIntoSorted();
-
-        /**
-         * Merge two unsorted arrays into a single sorted array without duplicates
-         * Write a Java 8 program to merge two unsorted arrays into a single-sorted array without duplicates.
-         */
-        mergeUnsortedArrayIntoSortedWithoutDuplicate();
-
-        /**
-         * Get the three maximum and three minimum numbers from a given list of integers
-         *
-         * Write a Java 8 program to get the three maximum and three minimum numbers from a given list of integers.
-         */
-
-        min3max3();
-
-        /**
-         * Check if two strings are anagrams or not using Java 8 streams
-         * Write a Java 8 program to check if two strings are anagrams or not using the stream API and lambda expressions.
-         */
-
-        isAnagram();
-        isAnagram2();
-
-        /**
-         * Find the sum of all digits of a number in Java 8
-         *
-         * Write a Java 8 program to find the sum of all digits of a given number.
-         *
-         */
-        sumOf();
-        /**
-         * Find the second-largest number in an integer array
-         *
-         * Write a Java 8 program to find the second-largest number in an integer array.
-         */
-        secondLargestNumberFromList();
-
-
-        /**
-         * Sort a list of strings according to the increasing order of their length
-         *
-         * Write a Java 8 program to sort a given list of strings according to the increasing order of their length.
-         */
-        sortByLengthOfList();
-        /**
-         * Find the sum and average of all elements in an integer array
-         *
-         * Write a Java 8 program to find the sum and average of all elements in an integer array.
-         */
-
-        calculateAndSumAndAverage();
-        /**
-         * Find the common elements between two arrays
-         *
-         * Write a Java 8 program to find the common elements between two arrays using streams.
-         */
-        commonElements();
-        /**
-         * Reverse each word of a string using Java 8 streams
-         *
-         * Write a Java 8 program to reverse each word of a given string using the stream API and lambda expressions
-         */
-        reverseEachWord();
-
-        /**
-         * Find the sum of the first 10 natural numbers
-         *
-         * Write a Java 8 program to find the sum of the first 10 natural numbers using streams.
-         */
-
-        int sumOf10NaturalNumber = IntStream.rangeClosed(1, 10)
-                .sum();
-        System.out.println(sumOf10NaturalNumber);
-
-        /**
-         * Reverse an integer array
-         *
-         * Write a Java 8 program to reverse an integer array.
-         */
-        reversedArray();
-
-        /**
-         * Find the most repeated element in an array
-         *
-         * Write a Java 8 program to find the most repeated element in an array.
-         */
-
-        mostRepeatedElement();
-
-        /**
-         * Check if a string is a palindrome using Java 8 streams
-         *
-         * Write a Java 8 program to check if a given string is a palindrome using the stream API and lambda expressions.
-         */
-
-        checkIsTheStringPalindrome();
-
-        /**
-         * Find strings in a list that start with a number
-         *
-         * Given a list of strings, write a Java 8 program to find the strings that start with a number.
-         */
-
-        stringsStartsWithNumber();
-
-        /**
-         * Extract duplicate elements from an array
-         *
-         * Write a Java 8 program to extract duplicate elements from an array.
-         */
-
-        extractDuplicateElements();
-
-        /**
-         * Print duplicate characters in a string
-         * Write a Java 8 program to print the duplicate characters in a string.
-         */
-
-        duplicateCharactersInString();
-
-        /**
-         * Find the first repeated character in a string
-         * Write a Java 8 program to find the first repeated character in a string.
-         */
-        firstRepeatedCharacter();
-
-        /**
-         * Find the first non-repeated character in a string
-         *
-         * Write a Java 8 program to find the first non-repeated character in a string.
-         */
-        firstNonRepeatingCharacter();
-
-        /**
-         * Generate the Fibonacci series
-         *
-         * Write a Java 8 program to generate the Fibonacci series.
-         */
-        generateFibonacciSeries();
-
-        /**
-         * Print the first 10 odd numbers
-         *
-         * Write a Java 8 program to print the first 10 odd numbers.
-         */
-        firstTenOddNumbers();
-
-        /**
-         * Get the last element of an array
-         *
-         * Write a Java 8 program to get the last element of an array.
-         */
-
-        lastElementInTheArray();
-
-        /**
-         * Calculate the age of a person in years
-         *
-         * Write a Java 8 program to calculate the age of a person in years given their birthday.
-         */
-        calculatePersonAgeInYear();
-    }
-
-    private static void calculatePersonAgeInYear() {
-        LocalDate birthDate = LocalDate.of(1998, 8, 17);
-        LocalDate currentDate = LocalDate.now();
-        int age = Period.between(birthDate, currentDate).getYears();
-        System.out.println("Age of the person is: " + age);
-    }
-
-    private static void lastElementInTheArray() {
-        int[] intArray = {0,1,2,3,4,5};
-        Integer lastElementInTheArray = Arrays.stream(intArray)
-                .boxed()
-                .reduce((first, second) -> second).orElse(-1);
-        System.out.println("\nlast elements in the array " + lastElementInTheArray);
-    }
-
-    private static void firstTenOddNumbers() {
-        Stream.iterate(1,i->i+2)
-                .limit(10)
-                .forEach(System.out::print);
-    }
-
-    private static void generateFibonacciSeries() {
-
-        Stream.iterate(new int[]{0,1},t->new int[]{ t[1], t[0]+ t[1] })
-                .limit(10)
-                .map(t->t[0])
-                .forEach(System.out::print);
-
-        Function<int[], List<Integer>> intArraytoListOFInt = array -> Arrays.stream(array).boxed()
-                .collect(toList());
-        List<Integer> collect = Stream.iterate(new int[]{0, 1}, t -> new int[]{t[1], t[0] + t[1]})
-                .limit(10)
-                .map(intArraytoListOFInt)
-                .flatMap(List::stream)
-                .distinct()
-                .collect(toList());
-        System.out.println(collect);
-    }
-
-    private static void firstNonRepeatingCharacter() {
-        String tempStr = "rohitrohi";
-        System.out.println (Arrays.stream (tempStr.split (""))
-                .filter (str -> tempStr.indexOf (str) == tempStr.lastIndexOf (str))
-                .findFirst ()
-                .orElse (""));
-
-    }
-
-    private static void checkIsTheStringPalindrome() {
-        String str = "momd";
-        String temp = str.replaceAll("\\s+", "").toLowerCase();
-        System.out.println("is palindrome string " +IntStream.range(0, temp.length() / 2)
-                .noneMatch(i -> temp.charAt(i) != temp.charAt(temp.length() - i - 1)));
-    }
-
-    private static void firstRepeatedCharacter() {
-        String word = "rohttoh";
-        System.out.println (Arrays.stream (word.split (""))
-                .filter (str -> word.indexOf (str) != word.lastIndexOf (str))
-                .findFirst ().orElse (""));
-    }
-
-    private static void duplicateCharactersInString() {
-        String word = "rohttoh";
-        System.out.println ("original String " + word);
-
-
-        System.out.println (Arrays.stream (word.split (""))
-        .filter (str -> word.indexOf (str) != word.lastIndexOf (str))
-        .map (str -> str.charAt (0))
-        .collect (toList ()));
-    }
-
-    private static void extractDuplicateElements() {
-        List<Integer> duplicateElements = of(1, 2,2,2,3, 3, 4, 5,1,1,56, 7, 8, 9, 10);
-
-        System.out.println("maxed Elements " + duplicateElements);
-
-        List<Integer> extractDuplicateElements = duplicateElements.stream()
-                .filter(element -> duplicateElements.indexOf(element)
-                        != duplicateElements.lastIndexOf(element))
-                .distinct()
-                .collect(toList());
-
-
-        System.out.println("extract duplicates elements from " + extractDuplicateElements);
-    }
-
-    private static void stringsStartsWithNumber() {
-        String [] words= {"rohit","foo","nemo","target1","12Target","2robot"};
-
-        System.out.println("original Strings " + Arrays.toString(words));
-
-        List<String> stringStartNumber = Arrays.stream(words)
-                 .filter(word -> Character.isDigit(word.charAt(0)))
-                 .toList();
-        System.out.println("strings started with a number " + stringStartNumber);
-    }
-
-    private static void mostRepeatedElement() {
-        int [] elements = {2,3,1,4,4,1,4,333,3,333,2,2,2,5,222};
-
-        System.out.println("original Array" + Arrays.toString(elements));
-        Function<Map<Integer, Long>, Integer> maxValuesKey = integerLongMap ->
-                integerLongMap.entrySet()
-                .stream()
-                .max(Map.Entry.comparingByValue())
-                .map(Map.Entry::getKey)
-                .orElse(Integer.MAX_VALUE);
-
-        Integer maxDuplicateValue = Arrays.stream(elements)
-                .boxed()
-                .collect(collectingAndThen(groupingBy(Function.identity(),
-                        counting()), maxValuesKey));
-
-        System.out.println("max duplicate value in the array "+maxDuplicateValue);
-    }
-
-    private static void reversedArray() {
-        int [] numberArray ={1,2,3,4,5,6,7,8,9,10};
-        System.out.println("original array" + Arrays.toString(numberArray));
-        int[] reversedArray = IntStream.rangeClosed(1, numberArray.length)
-                .map(number -> numberArray[numberArray.length - number])
-                .toArray();
-        System.out.println("reversedArray Array" + Arrays.toString(reversedArray));
-    }
-
-    private static void reverseEachWord() {
-        String stmt = "java is OOP language";
-        String reverseEachWord = Arrays.stream(stmt.split(" "))
-                .map(word -> new StringBuffer(word).reverse())
-                .collect(joining(" "));
-        System.out.println(reverseEachWord);
-    }
-
-    private static void commonElements() {
-        List<Integer> oneToTen = of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
-        List<Integer> twoToTen = of(2, 3, 4, 5, 6, 7, 8, 9, 10);
-        List<Integer> commonElements = oneToTen.stream()
-                .filter(twoToTen::contains)
-                .toList();
-        System.out.println(commonElements);
-    }
-
-    private static void calculateAndSumAndAverage() {
-        List<Integer> oneToTen = of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
-
-        IntSummaryStatistics summaryStatistics = oneToTen.stream()
-                .collect(summarizingInt(Integer::intValue));
-        System.out.println(summaryStatistics.getSum());
-        System.out.println(summaryStatistics.getAverage());
-    }
-
-    private static void sortByLengthOfList() {
-        List<String> names = Arrays.asList("rohit", "urmila", "rohit", "urmila", "ram", "sham", "sita", "gita");
-        names.stream()
-              .sorted(Comparator.comparingInt(String::length))
-              .forEach(System.out::println);
-    }
-
-    private static void secondLargestNumberFromList() {
-        List<Integer> oneToTen = of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
-        Integer secondLarge = oneToTen.stream()
-                .sorted(reverseOrder())
-                .skip(1)
-                .findFirst()
-                .orElse(Integer.MAX_VALUE);
-
-        System.out.println(secondLarge);
-    }
-
-    private static void sumOf() {
-        List<Integer> oneToTen = of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
-        System.out.println(oneToTen.stream()
-                .mapToInt(Integer::intValue)
-                .sum());
-    }
-
-    private static boolean isAnagram2() {
-
-        String string1 = "listen";
-        String string2 = "silent";
-
-        String join1 = Arrays.stream(string1.split(""))
-                .sorted()
-                .collect(joining(""));
-        String join2 = Arrays.stream(string2.split(""))
-                .sorted()
-                .collect(joining(""));
-        return join1.equals(join2);
-
-    }
-
-    private static void isAnagram() {
-        char[] splitIt = "listen".toCharArray();
-        char[] splitIt2 = "silent".toCharArray();
-
-        Arrays.sort(splitIt);
-        Arrays.sort(splitIt2);
-        if (Arrays.equals(splitIt,splitIt2)) {
-            System.out.println("is Anagram");
-        }else{
-            System.out.println("is not anagram");
-        }
-
-    }
-
-    private static void min3max3() {
-        List<Integer> randomNumbers = of(12, 32, 2, 4, 777, 5, 32, 890, 422, 44, 99, 43);
-        List<Integer> min3 = randomNumbers.stream()
-                .sorted(Integer::compare)
-                .limit(3)
-                .collect(toList());
-
-        List<Integer> max3 = randomNumbers.stream()
-                .sorted((x, y) -> Integer.compare(y, x))
-                .limit(3)
-                .collect(toList());
-        System.out.println(min3);
-        System.out.println(max3);
-    }
-
-    private static void mergeUnsortedArrayIntoSortedWithoutDuplicate() {
-        int [] randomNumbers ={12, 32, 2, 4, 777, 5, 32, 890, 422, 44, 99, 43};
-        int [] randomNumber2 = {4, 32, 2, 5, 6, 78, 98, 53, 90};
-
-        System.out.println(Arrays.toString(IntStream.concat(Arrays.stream(randomNumbers), Arrays.stream(randomNumber2))
-                .distinct()
-                .toArray()));
-    }
-
-    private static void mergeUnsortedArrayIntoSorted() {
-        int [] randomNumbers ={12, 32, 2, 4, 777, 5, 32, 890, 422, 44, 99, 43};
-        int [] randomNumber2 = {4, 3, 2, 5, 6, 78, 98, 53, 90};
-
-        int[] sortedArrayByMergingTwoArray = IntStream.concat(Arrays.stream(randomNumbers),
-                Arrays.stream(randomNumber2)).sorted().toArray();
-        System.out.println(Arrays.toString(sortedArrayByMergingTwoArray));
-    }
-
-    private static void minMaxFromList() {
-        List<Integer> randomNumbers = of(12, 32, 2, 4, 777, 5, 32, 890, 422, 44, 99, 43);
-        Integer maxNumber = randomNumbers.stream()
-                .max(Integer::compareTo)
-                .orElse(Integer.MAX_VALUE);
-        Integer minValue = randomNumbers.stream()
-                .min(Integer::compareTo)
-                .orElse(Integer.MIN_VALUE);
-        System.out.println(maxNumber);
-        System.out.println(minValue);
-        IntSummaryStatistics summaryStatistics = randomNumbers.stream()
-                .collect(summarizingInt(Integer::intValue));
-        System.out.println(summaryStatistics.getMax());
-        System.out.println(summaryStatistics.getMin());
-        System.out.println(summaryStatistics.getCount());
-        System.out.println(summaryStatistics.getSum());
-        System.out.println(summaryStatistics.getAverage());
-    }
-
-    private static void multipleOf5() {
-        List<Integer> randomNumbers = of(12, 32, 2, 4, 777, 5, 32, 890, 422, 44, 99, 43);
-        List<Integer> multipleOf5 = randomNumbers.stream()
-                .filter(n -> n % 5 == 0)
-                .collect(toList());
-        System.out.println(multipleOf5);
-    }
-
-    private static void joinListOfStrings() {
-        List<String> languageList = of("java", "c++", "c", "C sharp", "python", "kotlin", "scala");
-        String joinWithPrefixSuffixAndDelimiter = languageList
-                .stream()
-                .collect(joining(",", "[", "]"));
-        System.out.println(joinWithPrefixSuffixAndDelimiter);
-    }
-
-    private static void reverseSortedList() {
-        List<Integer> randomNumbers = of(12, 32, 2, 4, 777, 5, 32, 890, 422, 44, 99, 43);
-        //this is throwing unsupportedOprerationException because we are
-        // tries to sort ImmutableList that is not allowed .
-        //   randomNumbers.sort(Comparator.reverseOrder());
-        System.out.println(randomNumbers);
-        List<Integer> sortInReverse = randomNumbers.stream()
-                .sorted((x, y) -> Integer.compare(y, x)) // reverse sort
-                .collect(toList());
-        System.out.println(sortInReverse);
-
-        List<Integer> sortListReverse = randomNumbers.stream()
-                .sorted(reverseOrder())
-                .collect(toList());
-        System.out.println(sortListReverse);
-
-    }
-
-    private static void wordFrequency() {
-        List<String> names = Arrays.asList("rohit", "urmila", "rohit", "urmila", "ram", "sham", "sita", "gita");
-        Map<String, Long> frequencyWords = names.stream()
-                .collect(groupingBy(Function.identity(), counting()));
-        System.out.println(frequencyWords);
-    }
-
-    private static void characterFrequency() {
-        String name = "rohitroh";
-        Map<String, Long> characterFrequency = Arrays.stream(name.split(""))
-                .collect(groupingBy(Function.identity(), counting()));
-        System.out.println(characterFrequency);
-
-
-        Map<Character, Long> collected = name.chars()
-                .mapToObj(ch -> (char) ch)
-                .collect(groupingBy(Function.identity(), counting()));
-        System.out.println(collected);
-
-        Map<String, Integer> countCharacter = Arrays.stream(name.split(""))
-                .collect(groupingBy(Function.identity(),
-                        collectingAndThen(counting(), Long::intValue)));
-        System.out.println(countCharacter);
-    }
-
-    private static void removeDuplicateFromList() {
-        List<Integer> oneToTen = of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
-        List<Integer> removeDuplicate = oneToTen.stream()
-                .distinct()
-                .collect(toList());
-
-        System.out.println(removeDuplicate);
-        Set<Integer> removeDuplicateWithoutOrder
-                = oneToTen.stream()
-                .collect(toSet());
-        System.out.println(removeDuplicateWithoutOrder);
-
-        List<Integer> uniqueElement = oneToTen
-                .stream()
-                .filter(number -> oneToTen.indexOf(number)
-                        == oneToTen.lastIndexOf(number))
-                .collect(toList());
-        System.out.println(uniqueElement);
-    }
-
-    private static void separationOfEvenOddNumberInList() {
-        List<Integer> oneToTen = of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
-
-        Collection<List<Integer>> evenOddList = oneToTen.stream()
-                .collect(collectingAndThen(partitioningBy(i -> i % 2 == 0),
-                        Map::values));
-
-        System.out.println(evenOddList);
-    }
-
-    private static void separationOfEvenOddNumberInMap() {
-        List<Integer> oneToTen = of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
-
-        Map<Boolean, List<Integer>> evenAddOddSeparation = oneToTen.stream()
-                .collect(partitioningBy(i -> i % 2 == 0));
-
-        System.out.println(evenAddOddSeparation);
-    }
-}
